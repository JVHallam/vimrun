" Global config variables
let dividerPath = "resources/divider.txt"

" [ originalDirectoryName, outputFileName ]
let directoryList=[
\   ["movement","1_movement"],
\   ["insertion","2_insertion"],
\   ["deletion","3_deletion"],
\   ["replacement","4_replacement"],
\   ["special","5_special"],
\   ["exit", "6_exiting" ]
\]

" ============================= Functions ========================================================

" project => name of the modular_vimrun directory ( "insertion", "special", "etc" )
function SetupSingleSession( project )

    let filesString = globpath("resources/modular_vimrun/" . a:project, "*")
    let filesArray = split( filesString )

    " Grab the corresponding session file from temp/
    execute 'e' "temp/" . a:project

    " incase the file doesn't already exist, save it as we read from it later
    exec 'w'

    " If the length of the temp file != count of number of files
    " Find the files that aren't already in there and put them in at the top
    let fileContents = readfile(expand("%:p"))
    for file in filesArray
        let fileIndex = index(fileContents, file)

        if ( fileIndex == -1 )
            call cursor(0, 0)
            exec "norm" "O"
            put =file
        endif
    endfor

    " Remove some empty lines
    exec "g/^$/d"

    " Remove the last file, so that it gets put to the top in the next call
    " Move the cursor to the final line
    " Delete the line

    " Save
    exec "w"
endfunction

function FetchSession( project, exerciseCount )
    let fileLines = readfile("temp/" . a:project)
    let wantedIndex = a:exerciseCount - 1
    return fileLines[:wantedIndex]
endfunction

" This function needs:
    " * A name change => something to do with setup files
    " * To take a file list that needs to be conjoined, rather than use globpath
    " * Continue as normal
function RunForOneDirectory( fileList, outputFileName )
    exec "e" a:outputFileName . ".vimrun"

    " put the first divider in, to top off the file
    exec "read" g:dividerPath

    for fileName in a:fileList
      " Jump to the end of the file
      let endOfFile = line('$')
      call cursor(l:endOfFile, 0)

      " put in the divider
      exec "read" g:dividerPath

      " put in the, above it
      exec "read" fileName

    endfor

    " Top 4 lines of the file are whitespace
    " Delete them
    exec "1,4 d"
    exec "w"
endfunction

function InitEnvironment()
    " Setup the local temp directory, to hold sessions
    if( isdirectory( "temp" ) == 0 )
        silent !mkdir "temp"
    endif

    " Setup the output Directory
    " let dirname = $TEMP . "\\vimrun"
    " This needs creating
endfunction
    

" ============================= Main ========================================================
" Create the temp directory if it doesn't already exist
call InitEnvironment()

" Create the files
for pair in directoryList
    " Create the temp file
    call SetupSingleSession( pair[0] )

    " Grab the list of exercise file names from the file
    let fileList = FetchSession( pair[0], 40 )

    " Run for a directory!
    call RunForOneDirectory( fileList, pair[1] )
endfor

exec "wqall!"
