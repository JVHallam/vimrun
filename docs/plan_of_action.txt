The key focus, for the most part, will be on movement.
The reason people use vim is that it's quicker to move in anyways, then they start
using all the powerful vim chords.

The general mentality:
  If there are 2 lines (a purposefully flawed one and a correct one), only have 3 examples

  If there is something that the user can easily do themselves, have 5 lines.

To implement:
  -> Mirror vimtutor by having a bunch of "x" deletion exercises.
    -> Only place the errors at the starts and ends of words for the first 5 lines
    -> The next 5 lines, have the throughout the words.

  -> "i" correction:
    -> 10 lines with words that are missing their starts
    
  -> "a" 
    -> 5 lines with words missing endings.

  -> "A" correction
    -> 5 lines missing endings

  -> "dw"
    -> 3 lines with extra words
    -> 3 lines with extra words in random amounts, like in vim tutor

  -> "D" and "d$"
    -> 5 lines of varying lengths, with extra words

  -> "v" and "p"
    -> have the same list creation process, for 2 lines
      -> a) this is the first line.
         b)
         c)
         d) 

    -> have a bunch of words, in quotes, over 5 lines, that need replacing with anoter word
    -> 5 lines, so that they take a word "this" and have to replace it "that"
      -> "Jake"     : "My name is paul";
      -> "timeless" : "Vim is an outdated editor"
      -> "fascist"  : "We must install a strong government"

      So that they have to take Jake and replace paul

  -> "r"
    -> a semi useful key, 3 lines of what they did in vimtutor

  -> "R"
    -> a semi useful key, 3 lines of what they did in vimtutor again

  -> "c motion" and "s"
    -> Replace chunks of words, mainly their endings
    -> 3 lines

  -> "c$" and "C"
    -> 3 quick lines of corrections

  -> "gg" and "G"
    -> "G" to the appendix, to copy something for an exercise
    -> "line G" to take them to where they need to be
    -> The final words of the appendix are the names of the line to take them back to this exercise

  -> A simple search and replace, like the one you already have, might be useful

  -> "o" and "O"
    -> Simple exercise, just have what you're already got, 3 times over

  THE STUFF THAT VIM TUTOR DOESN'T HAVE!:
   The one thing that vim2tor doesn't have is tab management, that'd be pretty useful to have.
   Tabs are fantastic, think of a way to encorporate another file, so that they could copy and paste
   from it.

   :tabe might be a useful command to throw in

   vi [multiple file names] -c "tab all"

   the -c flag allows you to set setting from the commandline, before opening. That way, you can have
   a shit tonne of files open, when it starts.
   This will mean we can make things a little cleaner with tabs.

