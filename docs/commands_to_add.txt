How to make the user feel good:
  Time trails

  Points rating systems

  percentage of the accuracy

Shu-ha-ri:
  => Tell the users what to press, in what order
  => Then offer them an explanation
  => Add in the option to run the script, without the tutorial details
  => Do - think - master, not tell-master-do

What are the essentials of vim:
  movement:
    hjlk -> They're so essential and needed that you learn them regardless.
    e,w and b -> They're needed, but harder to really get used to.
      -> I've noticed during the vimtutor correction exercises, they're useful for learning w, e, b.
      -> w -> start of word correction, e -> end of word correction
      -> b -> force the user into a situation where they're at the end of a set of words that need editing
      -> Have a correction exercise that literally only requires, w,e,x

      -> Chaining w,e into b whilst editing with x
        -> Go along one line, from left to right,
        -> Go along the next line, from right to left, using only b

  Faster movement:
    :<line_number>

    Just mashing hjkl to move around is okay, but not the best.
    I should attempt to teach myself to move around faster, using the line numbers.

  CTRL + H, M, L:
    These seem pretty redundant if i'm using :<line_number> to navigate.
    :line can do the same job, but with more precision.

  Return to a previous point in time:
    This requires knowledge of the "jump list" feature
    CTRL SHIFT O

  Correction:
    -> u, U -> these are essential, don't really need addressing
    -> x, c, R, r -> r is just as useful as x 
    -> useful, whenever the

  Appending:
    -> a and A, could also be a pretty useful thing to do with w,e,b movement

  Scrolling:
    Scrolling is actuall pretty useful to know:
      -> Ctrl - U to scroll up    half a page

      -> Ctrl - D to scroll down  half a page

  repeat command .:
    -> if you hit '.' it repeats the previous command typed in. Try dft then . on the next line
    -> t his is a line t ha t is full of t he t hings t o wri t e

  Searching + Replacement:
    Find:
    -> f<letter> to find the first occurence of a letter in a line.
    -> df<letter> delete up to the next instance of <letter>
    
    -> I replacement is good way to encrypt the file. Replace a bunch of characters, with a bunch of others
    -> That way, the user is forced to do global and local replacements, so that they can decrypt the exercise
    -> They could have to search for the unlock keys in the text?
      -> /key:(<key_goes_here>) where :%s/character/key/g fixes the text globally
      -> searching and :set hlsearch could be useful here

    -> g movement:
      -> gg may be hard to put in
      -> <line_no> : G
      -> G
      -> could be put in with the find and decryption

  Chords and multipliers:
    -> replacement, deletion and visual mode are fantastic ways of getting used to the chords involved

  File management:  
    -> This could be a bonus, level 2 sort of situation
    -> file exploration using the :Sex command
    -> split screening
    -> tabs
      -> gt tab switching
      -> copying and pasting from one file to another
    -> splits into tabs:
      -> ctrl+w, shift+t

  Autocomplete:
    -> CTRL + P to autocomplete a word, have a quick section on the usage of that

There needs to be a section on the vim console:
  Searching:
    the /\cerrroor bit

  Replacement:
    :s/thee/the/g

    :%s/thee/the/g

  Deletion: 
    :g/word/d
      Delete all lines with word in it


Ideas for the new file:
  The file starts off as absolute giberish

  :set hlsearch
  /<value> to find all occurences of a value
    -> dd all lines containing that value

  /<val[ue]> to do the same as above
    -> dd all lines containing that value
    
  -> :%s/old/new/g
    -> start replacing some of the gibberish with new and useful values
    -> do this with the entire alphabet to decrypt the rest of the tutorial

  -> '<,'>w <file_name>
  -> :r <file_name>
    -> Don't know exactly how useful this command is

Additional movement:
  CTRL + o 
  CTRL + i 
  These move you around, with regards to previous places you've been. This make shit so much easier to get 
  back to the work that you were previously doing.


